[{"C:\\test\\swapi.dev\\src\\index.js":"1","C:\\test\\swapi.dev\\src\\reportWebVitals.js":"2","C:\\test\\swapi.dev\\src\\Components\\FilmsList\\FilmsList.jsx":"3","C:\\test\\swapi.dev\\src\\Components\\Spinner\\Spinner.jsx":"4","C:\\test\\swapi.dev\\src\\App.jsx":"5","C:\\test\\swapi.dev\\src\\Components\\FilmsDetails\\FilmsDetails.jsx":"6","C:\\test\\swapi.dev\\src\\Components\\FormReview\\FormReview.jsx":"7","C:\\test\\swapi.dev\\src\\Components\\PoPup\\PoPup.jsx":"8","C:\\test\\swapi.dev\\src\\Components\\FormReview\\ReviewData.jsx":"9"},{"size":375,"mtime":1608106160979,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1606376971923,"results":"12","hashOfConfig":"11"},{"size":958,"mtime":1608208326647,"results":"13","hashOfConfig":"11"},{"size":327,"mtime":1608110508697,"results":"14","hashOfConfig":"11"},{"size":1038,"mtime":1608559133088,"results":"15","hashOfConfig":"11"},{"size":3421,"mtime":1608553171390,"results":"16","hashOfConfig":"11"},{"size":2579,"mtime":1608630951946,"results":"17","hashOfConfig":"11"},{"size":332,"mtime":1608554072458,"results":"18","hashOfConfig":"11"},{"size":753,"mtime":1608632420325,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"knrv7p",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\test\\swapi.dev\\src\\index.js",[],["41","42"],"C:\\test\\swapi.dev\\src\\reportWebVitals.js",[],"C:\\test\\swapi.dev\\src\\Components\\FilmsList\\FilmsList.jsx",[],"C:\\test\\swapi.dev\\src\\Components\\Spinner\\Spinner.jsx",[],["43","44"],"C:\\test\\swapi.dev\\src\\App.jsx",[],"C:\\test\\swapi.dev\\src\\Components\\FilmsDetails\\FilmsDetails.jsx",["45","46"],"import React, { useState, useEffect } from 'react'\r\nimport './FilmsDetails.css'\r\nimport { PoPup } from '../PoPup/PoPup'\r\nimport { Spinner } from '../Spinner/Spinner'\r\n\r\nexport const FilmsDetails = ({filmIndex}) => {\r\n\r\n    const [film, setFilm] = useState('')\r\n    const [planets, setPlanets] = useState('')\r\n    const [vehicles, setVehicles] = useState('')\r\n    const [starships, setStarships] = useState('')\r\n    const [species, setSpecies] = useState('')\r\n    const [characters, setCharacters] = useState('')\r\n\r\n    \r\n    useEffect(() => {\r\n         fetchFilm(filmIndex + 1)\r\n    }, [filmIndex])\r\n\r\n    useEffect(() => {\r\n        fetchPromise(film.planets).then(res => setPlanets(res))\r\n        fetchPromise(film.vehicles).then(res => setVehicles(res))\r\n        fetchPromise(film.starships).then(res => setStarships(res))\r\n        fetchPromise(film.species).then(res => setSpecies(res))\r\n        fetchPromise(film.characters).then(res => setCharacters(res))\r\n    }, [film.vehicles, film.vehicles, film.starships, film.species, film.characters])\r\n\r\n  \r\n\r\n    const fetchFilm = (id) => {\r\n        fetch(`https://swapi.dev/api/films/${id}/`)\r\n        .then(res => res.json())\r\n        .then(res => setFilm(res))\r\n    }\r\n\r\n\r\n    const fetchPromise = async urls => {\r\n        try {\r\n            const response = await Promise.all(\r\n                urls.map(url => fetch(url).then(res => res.json()))\r\n            )\r\n            return response\r\n        } catch (error) {\r\n            console.error('ERROR', error);\r\n            <Spinner/>\r\n        }\r\n    }\r\n\r\n\r\n    return<>\r\n  <div className=\"card text-dark bg-light mb-3\">\r\n  <div className=\"card-header\"><h5>{ film.title }</h5></div>\r\n  <div className=\"card-body\">\r\n    <h5 className=\"card-title\">Directed by</h5>\r\n    <p className=\"card-text\">\r\n        {film.director}\r\n        {film.producer}\r\n    </p>\r\n    <h5 className='card-title'>Release date</h5>\r\n    <p className='card-text'>{film.release_date}</p>\r\n  </div>\r\n</div>\r\n  <div className=\"card text-white bg-dark mb-3\" >\r\n  <div className=\"card-header\">Characters</div>\r\n  <div className=\"card-body\">\r\n  {characters ? characters.map((res, i) => {\r\n        return (\r\n            <span key={i}>{res.name} , </span>\r\n        )\r\n    }) : <Spinner/>}\r\n  </div>\r\n</div>\r\n<div className=\"card text-white bg-dark mb-3\" >\r\n  <div className=\"card-header\">Planets</div>\r\n  <div className=\"card-body\">\r\n  {planets ? planets.map((res, i) => {\r\n        return (\r\n            <span key={i}>{res.name} , </span>\r\n        )\r\n    }) : <Spinner/>}\r\n  </div>\r\n</div>\r\n<div className=\"card text-white bg-dark mb-3\" >\r\n  <div className=\"card-header\">Starships </div>\r\n  <div className=\"card-body\">\r\n  {starships ? starships.map((res, i) => {\r\n        return (\r\n            <span key={i}>{res.name} , </span>\r\n        )\r\n    }) : <Spinner/>}\r\n  </div>\r\n</div>\r\n<div className=\"card text-white bg-dark mb-3\" >\r\n  <div className=\"card-header\">Vehicles</div>\r\n  <div className=\"card-body\">\r\n  {vehicles ? vehicles.map((res, i) => {\r\n        return (\r\n            <span key={i}>{res.name} , </span>\r\n        )\r\n    }) : <Spinner/>}\r\n  </div>\r\n</div>\r\n<div className=\"card text-white bg-dark mb-3\" >\r\n  <div className=\"card-header\">Species</div>\r\n  <div className=\"card-body\">\r\n  {species ? species.map((res, i) => {\r\n        return (\r\n            <span key={i}>{res.name} , </span>\r\n        )\r\n    }) : <Spinner/>}\r\n  </div>\r\n</div>\r\n</>\r\n}","C:\\test\\swapi.dev\\src\\Components\\FormReview\\FormReview.jsx",[],"C:\\test\\swapi.dev\\src\\Components\\PoPup\\PoPup.jsx",[],"C:\\test\\swapi.dev\\src\\Components\\FormReview\\ReviewData.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":26,"column":8,"nodeType":"59","endLine":26,"endColumn":85,"suggestions":"60"},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],"no-unused-vars","'PoPup' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'film.planets'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [film.vehicles, film.starships, film.species, film.characters, film.planets]",{"range":"66","text":"67"},[969,1046],"[film.vehicles, film.starships, film.species, film.characters, film.planets]"]